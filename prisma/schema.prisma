generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model quacks {
  id              Int               @id @default(autoincrement())
  quack_id        String            @db.VarChar(45)
  content         String
  creation_date   DateTime          @default(now()) @db.Timestamp(6)
  parent_post_id  Int?
  is_quote        Boolean
  is_reply        Boolean
  is_active       Boolean
  quack_comments  quack_comments[]
  requacks        requacks[]
  user_quack      user_quack[]
  user_quack_like user_quack_like[]
}

model requacks {
  id      Int    @id @default(autoincrement())
  user_id Int
  post_id Int
  quacks  quacks @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "requacks_post_id_foreign")
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "requacks_user_id_foreign")
}

model user_follows {
  id                                         Int   @id @default(autoincrement())
  user_id                                    Int
  user_id_followed                           Int
  users_user_follows_user_id_followedTousers users @relation("user_follows_user_id_followedTousers", fields: [user_id_followed], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_follows_user_id_followed_foreign")
  users_user_follows_user_idTousers          users @relation("user_follows_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_follows_user_id_following_foreign")

  @@unique([user_id, user_id_followed], map: "unique_user_follow")
}

model user_quack_like {
  id      Int    @id @default(autoincrement())
  post_id Int
  user_id Int
  quacks  quacks @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_quack_like_post_id_foreign")
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_quack_like_user_id_foreign")

  @@unique([user_id, post_id], map: "user_quack_like_uq")
}

model users {
  id                                                Int               @id @default(autoincrement())
  user_id                                           String            @unique(map: "users_user_id_unique") @db.VarChar(255)
  user_name                                         String            @unique(map: "users_user_name_unique") @db.VarChar(255)
  display_name                                      String            @db.VarChar(255)
  password                                          String            @db.VarChar(255)
  profile_picture                                   String?           @db.VarChar(255)
  email                                             String            @unique(map: "users_email_unique") @db.VarChar(255)
  is_active                                         Boolean
  email_is_valid                                    Boolean
  bio                                               String?
  comment_like                                      comment_like[]
  comment_requack                                   comment_requack[]
  requacks                                          requacks[]
  user_comments                                     user_comments[]
  user_follows_user_follows_user_id_followedTousers user_follows[]    @relation("user_follows_user_id_followedTousers")
  user_follows_user_follows_user_idTousers          user_follows[]    @relation("user_follows_user_idTousers")
  user_quack                                        user_quack[]
  user_quack_like                                   user_quack_like[]
}

model comments {
  id                                                               Int                @id @default(autoincrement())
  comment_id                                                       String?            @db.VarChar(60)
  content                                                          String?
  is_active                                                        Boolean?
  creation_date                                                    DateTime?          @default(now()) @db.Timestamp(6)
  comment_like                                                     comment_like[]
  comment_requack                                                  comment_requack[]
  comments_comment_comments_comment_comment_commented_idTocomments comments_comment[] @relation("comments_comment_comment_commented_idTocomments")
  comments_comment_comments_comment_comment_idTocomments           comments_comment[] @relation("comments_comment_comment_idTocomments")
  quack_comments                                                   quack_comments[]
  user_comments                                                    user_comments[]
}

model user_quack {
  id      Int    @id(map: "user_quak_pkey") @default(autoincrement())
  post_id Int
  user_id Int
  quacks  quacks @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_quak_post_id_foreign")
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_quak_user_id_foreign")
}

model quack_comments {
  id         Int       @id @default(autoincrement())
  quack_id   Int?
  comment_id Int?
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quack_comments_comments_fk")
  quacks     quacks?   @relation(fields: [quack_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quack_comments_quacks_fk")
}

model comment_like {
  id         Int       @id @default(autoincrement())
  comment_id Int?
  user_id    Int?
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([comment_id, user_id], map: "uq_like_comment")
}

model comment_requack {
  id         Int       @id @default(autoincrement())
  comment_id Int?
  user_id    Int?
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([comment_id, user_id], map: "uq_requack_comment")
}

model comments_comment {
  id                                                       Int       @id @default(autoincrement())
  comment_id                                               Int?
  comment_commented_id                                     Int?
  comments_comments_comment_comment_commented_idTocomments comments? @relation("comments_comment_comment_commented_idTocomments", fields: [comment_commented_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments_comments_comment_comment_idTocomments           comments? @relation("comments_comment_comment_idTocomments", fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_comments {
  id         Int       @id @default(autoincrement())
  comment_id Int?
  user_id    Int?
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
